# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Appointment {
  id: ID!
  start: Date!
  end: Date!
  user: User!
  billed: Boolean
}

input AppointmentCreateInput {
  start: Date!
  end: Date!
  user: UserRelationalInput!
}

input AppointmentRelationalInput {
  id: String
}

input AppointmentUpdateInput {
  id: ID
  start: Date
  end: Date
  user: UserRelationalInput!
}

input AppointmentWhereInput {
  id: ID
  start: String
  end: String
  billed: Boolean
  user: UserRelationalInput
  OR: [AppointmentWhereInput!]
}

input AppointmentWhereUniqueInput {
  id: String
}

type Auth {
  token: String!
  user: User!
}

type Category {
  id: ID!
  name: String!
  tasks: [Task!]!
}

input CategoryCreateInput {
  name: String!
}

input CategoryRelationalInput {
  id: ID!
}

input CategoryUpdateInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  id: String
  name: String
}

input CategoryWhereUniqueInput {
  id: String
}

type Counters {
  high: Float
  medium: Float
  low: Float
}

"""Date custom scalar type"""
scalar Date

type FireStation {
  id: ID!
  name: String!
  users: [User!]!
}

input FireStationRelationalInput {
  id: String
}

input FireStationWhereUniqueInput {
  id: String
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(where: UserWhereUniqueInput, data: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
  createTask(data: TaskCreateInput!): Task!
  updateTask(where: TaskWhereUniqueInput!, data: TaskUpdateInput!): Task!
  deleteTask(where: TaskWhereUniqueInput!): Task!
  uploadFile(file: UploadInput!): UploadResult!
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category!
  createNotice(data: NoticeCreateInput!): Notice!
  updateNotice(where: NoticeWhereUniqueInput!, data: NoticeUpdateInput!): Notice!
  deleteNotice(where: NoticeWhereUniqueInput!): Notice!
  createAppointment(data: AppointmentCreateInput!): Appointment!
  updateAppointment(where: AppointmentWhereUniqueInput!, data: AppointmentUpdateInput!): Appointment!
  deleteAppointment(where: AppointmentWhereUniqueInput!): Appointment!
  billAppointment(billed: Boolean!, where: AppointmentWhereUniqueInput!): Appointment!
  signIn(platform: String!, password: String!, email: String!): Auth!
}

type Notice {
  id: ID!
  title: String!
  description: String!
  seenBy: [User!]!
  assignedTo: [User!]!
  createdBy: User!
  priority: Priority!
  categories: [Category!]!
}

input NoticeCreateInput {
  title: String!
  description: String!
  seenBy: [UserRelationalInput!]!
  assignedTo: [UserRelationalInput!]!
  createdBy: UserRelationalInput!
  priority: Priority!
  categories: [CategoryRelationalInput!]!
}

input NoticeRelationalInput {
  id: String
}

input NoticeUpdateInput {
  id: ID
  title: String
  description: String
  seenBy: [UserRelationalInput!]
  assignedTo: [UserRelationalInput!]
  createdBy: UserRelationalInput
  priority: Priority
  categories: [CategoryRelationalInput!]
}

input NoticeWhereInput {
  id: String
  title: String
  description: String
  seenBy: [UserRelationalInput!]
  assignedTo: [UserRelationalInput!]
  createdBy: UserRelationalInput
  priority: Priority
  categories: [CategoryRelationalInput!]
}

input NoticeWhereUniqueInput {
  id: String
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

type Query {
  users(where: UserWhereInput): [User!]!
  user(where: UserWhereUniqueInput!): User
  tasks(where: TaskWhereInput!): TaskPayload!
  userTasks(where: TaskWhereInput!): TaskPayload!
  task(where: TaskWhereUniqueInput!): Task
  categories(where: CategoryWhereInput!): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  notice(where: NoticeWhereUniqueInput!): Notice!
  notices(where: NoticeWhereInput): [Notice!]!
  userNotices(where: NoticeWhereInput): [Notice!]!
  appointments(where: AppointmentWhereInput!): [Appointment!]!
  appointmentsPerDate(date: Date!): [Appointment!]!
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  me: User!
}

type Task {
  id: ID!
  title: String!
  description: String!
  address: String!
  done: Boolean!
  document: String
  priority: Priority!
  date: Date!
  categories: [Category!]
  assignedTo: User!
  assignedBy: User!
}

input TaskCreateInput {
  title: String!
  description: String!
  priority: Priority!
  address: String!
  date: Date!
  done: Boolean!
  document: UploadInput
  categories: [CategoryRelationalInput!]
  assignedTo: UserRelationalInput!
  assignedBy: UserRelationalInput!
}

type TaskPayload {
  items: [Task!]!
  counters: Counters!
}

input TaskRelationalInput {
  id: String
}

input TaskUpdateInput {
  id: ID
  title: String
  description: String
  priority: Priority
  address: String
  done: Boolean
  date: Date
  document: UploadInput
  categories: [CategoryRelationalInput!]
  assignedTo: UserRelationalInput
  assignedBy: UserRelationalInput
}

input TaskWhereInput {
  id: String
  title: String
  description: String
  address: String
  done: Boolean
  priority: Priority
  date: Date
}

input TaskWhereUniqueInput {
  id: String
}

type Upload {
  filename: String
  base64: String!
}

input UploadInput {
  filename: String
  base64: String!
}

type UploadResult {
  url: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  fireStation: FireStation!
  responsibleTasks: [Task!]!
  createdTasks: [Task!]!
  appointments: [Appointment!]!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  role: String!
  fireStation: FireStationRelationalInput!
  responsibleTasks: [TaskRelationalInput!]
  createdTasks: [TaskRelationalInput!]
}

input UserRelationalInput {
  id: ID
  name: String
  email: String
  role: String
}

input UserUpdateInput {
  id: ID!
  name: String
  email: String
  password: String
  role: String
  fireStation: FireStationRelationalInput
}

input UserWhereInput {
  id: String
  name: String
  description: String
  email: String
  role: String
}

input UserWhereUniqueInput {
  id: ID
  name: String
  email: String
  role: String
}
